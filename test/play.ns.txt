printinstructions:=1;
//prettyprint:=nil;

output := func ()
{
_proto: {h: func () 28},
x: 476,
g: {m: func () 47},
f: func () begin
 local a := 123, b := 567;
 self.x := 30;
 [
    self.x,
    call func() a with (),
    call func(a,b,c,d,e,f,g,h) a+b+c+d+e+f+g+h with (1,2,4,8,16,32,64,128),
    g:?m(),
    inherited:h(),
    inherited:?h(),
    foreach x in self do x,
    foreach x in [1,2,3] collect x,
    for i := 1 to 3 do a := a + i,
    a + b,
    a - b,
    a * b,
    a / b,
    a div b,
    a = b,
    a <> b,
    a < b,
    a <= b,
    a > b,
    a >= b,
    not a,
    band(a,b),
    bor(a,b),
    //bnot(a),
 ]
end,
}:f();

//print(output.literals[0].f.instructions);
/*
output := func () begin a := 2; a end;
*/

output := func () begin
    local a := 'a;
    local aa := 'a.a;
    local z;
    local x := [
        '[a][0],        'a,
        '{a:1}.a,       1,
        '[a].(0),       'a,
        '{a:1}.(a), 1,
        '[[a]].([pathexpr:0,0]),    'a,
        '{a:[a]}.([pathexpr:a,0]),  'a,
        '{a:{a:1}}.(aa),            1,
        begin z := ['a]; z[0] := 'b; z[0] end,  'b,
        begin z := {a:1}; z.(a) := 2; z.a end,  2,
        begin z := ['a]; z.(0) := 'b; z[0] end, 'b,
        begin z := [['a]]; z.([pathexpr:0,0]) := 'b; z[0][0] end,   'b,
        begin z := {a:{a:1}}; z.(aa) := 2; z.a.a end,   2,
        begin z := '[a]; z.(0) exists end,  true,
        begin z := '{a:1}; z.a exists end,  true,
        begin z := '{a:[a]}; z.([pathexpr:0,0]) exists end, true
    ];

    for i := 0 to Length(x) div 2 - 1 do begin
        if x[i*2] <> x[i*2+1] then begin
            Throw('|evt.ex|, "step " && i && " failed, result=" && x[i*2]);
        end;
    end;

end;

write("==> ");
//write(call output with ());
write("\n");
